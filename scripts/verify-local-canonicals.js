#!/usr/bin/env node

/**
 * Local Build Verification Script
 * 
 * This script verifies that our local build has the correct canonical URLs
 * for all the static HTML files generated by the prerender script.
 */

const fs = require('fs');
const path = require('path');

const ROUTES_TO_CHECK = [
  { path: '/', expectedCanonical: 'https://www.fixloapp.com/' },
  { path: '/how-it-works/', expectedCanonical: 'https://www.fixloapp.com/how-it-works' },
  { path: '/contact/', expectedCanonical: 'https://www.fixloapp.com/contact' },
  { path: '/signup/', expectedCanonical: 'https://www.fixloapp.com/signup' },
  { path: '/services/', expectedCanonical: 'https://www.fixloapp.com/services' },
  { path: '/services/plumbing/', expectedCanonical: 'https://www.fixloapp.com/services/plumbing' },
  { path: '/pro/signup/', expectedCanonical: 'https://www.fixloapp.com/pro/signup' }
];

function extractCanonicalUrl(htmlContent) {
  const canonicalMatch = htmlContent.match(/<link[^>]+rel=["']canonical["'][^>]*href=["']([^"']+)["'][^>]*>/i);
  return canonicalMatch ? canonicalMatch[1] : null;
}

function extractTitle(htmlContent) {
  const titleMatch = htmlContent.match(/<title[^>]*>([^<]+)<\/title>/i);
  return titleMatch ? titleMatch[1].trim() : null;
}

async function verifyLocalBuild() {
  console.log('üîç Local Build Canonical URL Verification\n');
  
  let totalChecks = 0;
  let passedChecks = 0;

  for (const route of ROUTES_TO_CHECK) {
    const filePath = route.path === '/' ? 'index.html' : `.${route.path}index.html`;
    
    totalChecks++;
    
    try {
      if (!fs.existsSync(filePath)) {
        console.log(`‚ùå ${route.path}: File not found (${filePath})`);
        continue;
      }

      const htmlContent = fs.readFileSync(filePath, 'utf8');
      const actualCanonical = extractCanonicalUrl(htmlContent);
      const title = extractTitle(htmlContent);

      if (actualCanonical === route.expectedCanonical) {
        console.log(`‚úÖ ${route.path}: Canonical URL correct`);
        console.log(`   üìÑ Title: ${title}`);
        console.log(`   üîó Canonical: ${actualCanonical}`);
        passedChecks++;
      } else {
        console.log(`‚ùå ${route.path}: Canonical URL incorrect`);
        console.log(`   üìÑ Title: ${title}`);
        console.log(`   üîó Expected: ${route.expectedCanonical}`);
        console.log(`   üîó Actual: ${actualCanonical}`);
      }
    } catch (error) {
      console.log(`‚ùå ${route.path}: Error reading file - ${error.message}`);
    }
    
    console.log('');
  }

  console.log(`üìä Results: ${passedChecks}/${totalChecks} checks passed`);
  
  if (passedChecks === totalChecks) {
    console.log('üéâ All canonical URLs are correctly implemented!');
    console.log('‚úÖ Ready for production deployment');
  } else {
    console.log('‚ö†Ô∏è  Some canonical URLs need attention');
  }
}

verifyLocalBuild().catch(console.error);